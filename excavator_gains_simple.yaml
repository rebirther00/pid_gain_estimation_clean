# ============================================================================
# 굴착기 PID/FF 게인 (ROS2 제어기용 - 간단 버전)
# ============================================================================
# 날짜: 2025-10-14
# 검증: V3 대비 ±2% 이내 일치
# ============================================================================

# 제어 주기
sample_time: 0.01  # 100Hz

# Anti-windup 한계
integral_limit: 10.0

# ============================================================================
# 최종 PID 게인 (Full Gains)
# ============================================================================

pid:
  arm_in:    {kp: 3.691, ki: 1.846, kd: 0.0}
  arm_out:   {kp: 3.597, ki: 1.799, kd: 0.0}
  boom_up:   {kp: 11.431, ki: 5.716, kd: 0.0}  # 중력 보상
  boom_down: {kp: 6.382, ki: 3.191, kd: 0.0}
  bucket_in: {kp: 1.654, ki: 0.827, kd: 0.0}   # 저신뢰도 주의
  bucket_out: {kp: 1.569, ki: 0.784, kd: 0.0}

# ============================================================================
# 안전 PID 게인 (초기 테스트용, Ki 50%)
# ============================================================================

pid_safe:
  arm_in:    {kp: 3.691, ki: 0.923, kd: 0.0}
  arm_out:   {kp: 3.597, ki: 0.899, kd: 0.0}
  boom_up:   {kp: 11.431, ki: 2.858, kd: 0.0}
  boom_down: {kp: 6.382, ki: 1.595, kd: 0.0}
  bucket_in: {kp: 1.654, ki: 0.414, kd: 0.0}
  bucket_out: {kp: 1.569, ki: 0.392, kd: 0.0}

# ============================================================================
# FF 게인 (저속 <10 deg/s)
# ============================================================================

ff:
  arm_in:    {kv: 2.709, k_offset: 36.0}
  arm_out:   {kv: 1.390, k_offset: 40.2}
  boom_up:   {kv: 4.374, k_offset: 35.9}
  boom_down: {kv: 3.134, k_offset: 35.4}
  bucket_in: {kv: 6.045, k_offset: 0.0}     # 원래 -22.6, 0 사용 권장
  bucket_out: {kv: 0.850, k_offset: 40.6}

# ============================================================================
# 사용법 (제어 법칙)
# ============================================================================
# 
# 1. FF 계산:
#    target_vel = (target_pos - current_pos) / dt
#    if target_vel > 0:
#        u_ff = kv_in * target_vel + k_offset_in
#    else:
#        u_ff = kv_out * abs(target_vel) + k_offset_out
# 
# 2. PID 계산:
#    error = target_pos - current_pos
#    integral += error * dt
#    integral = clamp(integral, -10, 10)  # Anti-windup
#    u_pid = kp * error + ki * integral
# 
# 3. 총 제어 입력:
#    u_total = u_ff + u_pid
#    duty = clamp(abs(u_total), 0, 100)
#    valve = "in/up" if u_total > 0 else "out/down"
# ============================================================================

