---
alwaysApply: false
---
<version>2.0.0</version>

## Context

프로그램 개발 시 적용하는 Context-driven 방법론 (페이지, 컴포넌트, 모달, 폼 등)

## 핵심 원칙

### 🎯 4단계 개발 프로세스

**전체 흐름**: Plan → Test → Act → Reflect

1. **Phase 1 - Plan**: Context 수집 및 계획 → [1001-context-plan.mdc](mdc:1001-context-plan.mdc)
2. **Phase 1.5 - Test**: TDD 기반 테스트 설계 및 작성 → [1004-context-test.mdc](mdc:1004-context-test.mdc)
3. **Phase 2 - Act**: Context 기반 단계별 구현 → [1002-context-act.mdc](mdc:1002-context-act.mdc)
4. **Phase 3 - Reflect**: 작업 내용 정리 및 히스토리 축적 → [1003-context-reflect.mdc](mdc:1003-context-reflect.mdc)

### 🔄 단계 전환 규칙 (오케스트레이션)

#### 현재 단계 판단 기준

**Phase 1 - Planning 상태 판단**:

-   새로운 개발 작업 시작 시
-   Context 수집이 완료되지 않은 상태
-   명시적 트리거가 발동되지 않은 상태

**Phase 1.5 - Testing 상태 판단**:

-   Planning 완료 + TDD Context 수집 중
-   테스트 설계 및 작성 진행 중
-   테스트 작업이 완료되지 않은 상태

**Phase 2 - Acting 상태 판단**:

-   Planning & Testing 완료 + 명시적 트리거 발동
-   6단계 구현 프로세스 진행 중
-   구현 작업이 완료되지 않은 상태

**Phase 3 - Reflecting 상태 판단**:

-   구현 작업 완료 후
-   작업 히스토리 정리가 필요한 상태

#### Plan → Test 전환 조건

**필수 조건 (모두 충족해야 함)**:

1. 필수 Context 100% 완료
2. 중요 Context 80% 이상 완료
3. **명시적 테스트 트리거 발동**

**명시적 테스트 트리거 키워드**:

-   "test"
-   "테스트해줘"
-   "TDD 해줘"
-   "테스트 작성해줘"
-   "Red-Green-Refactor 해줘"

**전환 시나리오**:

-   ✅ **Test 진행**: 모든 조건 충족 → [1004-context-test.mdc](mdc:1004-context-test.mdc) 적용
-   ❌ **Planning 유지**: 조건 미충족 → [1001-context-plan.mdc](mdc:1001-context-plan.mdc) 계속
-   ⚠️ **부분 Test**: 필수 Context만 완료 + 트리거 → 주의하며 [1004-context-test.mdc](mdc:1004-context-test.mdc) 진행

#### Test → Act 전환 조건

**자동 전환 조건**:

1. 테스트 코드 작성 완료 (Red 단계 완료)
2. 모든 핵심 테스트 케이스 구현 완료
3. Mock 데이터 및 테스트 환경 설정 완료

**전환 시나리오**:

-   ✅ **Act 자동 진행**: 테스트 코드 작성 완료 → [1002-context-act.mdc](mdc:1002-context-act.mdc) 자동 적용
-   ❌ **Testing 유지**: 테스트 코드 미완료 → [1004-context-test.mdc](mdc:1004-context-test.mdc) 계속

#### Act → Reflect 전환 조건

**필수 조건 (모두 충족해야 함)**:

1. 7단계 TDD 구현 프로세스 모두 완료 (0-6단계 필수, 7단계 선택적)
2. **TDD Green 단계 달성**: 모든 테스트 통과 확인
3. 사용자 시나리오 테스트 통과
4. 전체 기능 동작 확인
5. **명시적 완료 트리거 발동**

**명시적 완료 트리거 키워드**:

-   "reflect"
-   "정리해줘"
-   "완료됐어"
-   "문서화해줘"
-   "히스토리 정리해줘"

**전환 시나리오**:

-   ✅ **Reflect 진행**: 모든 조건 충족 → [1003-context-reflect.mdc](mdc:1003-context-reflect.mdc) 적용
-   ❌ **Acting 유지**: 조건 미충족 → [1002-context-act.mdc](mdc:1002-context-act.mdc) 계속
-   ⚠️ **부분 Reflect**: 구현 완료 + 트리거 → 주의하며 [1003-context-reflect.mdc](mdc:1003-context-reflect.mdc) 진행

#### 예외 상황 처리

**Act → Test 역전환**:

-   구현 중 테스트 부족 발견 시 → [1004-context-test.mdc](mdc:1004-context-test.mdc) 재적용
-   추가 테스트 케이스 필요 시 → Testing 단계로 복귀

**Test → Plan 역전환**:

-   테스트 설계 중 Context 부족 발견 시 → [1001-context-plan.mdc](mdc:1001-context-plan.mdc) 재적용
-   기술적 의존성 추가 확인 필요 시 → Planning 단계로 복귀
-   사용자 요구사항 변경 시 → Context 재수집 필요

### 📊 단계별 규칙 적용 로직

#### Phase 1: Planning 규칙 적용

**적용 조건**:

```markdown
IF (새로운 개발 작업 OR Context 미완료 OR 트리거 미발동) THEN
APPLY [1001-context-plan.mdc](mdc:1001-context-plan.mdc)
```

**적용 중단 조건**:

```markdown
IF (필수 Context 100% AND 중요 Context 80%+ AND 명시적 테스트 트리거 발동) THEN
STOP [1001-context-plan.mdc](mdc:1001-context-plan.mdc)
START [1004-context-test.mdc](mdc:1004-context-test.mdc)
```

#### Phase 1.5: Testing 규칙 적용

**적용 조건**:

```markdown
IF (Planning 완료 AND 명시적 테스트 트리거 발동) THEN
APPLY [1004-context-test.mdc](mdc:1004-context-test.mdc)
```

**적용 중단 조건**:

```markdown
IF (테스트 코드 작성 완료 AND 핵심 테스트 케이스 구현 완료 AND Mock 환경 설정 완료) THEN
STOP [1004-context-test.mdc](mdc:1004-context-test.mdc)
AUTO_START [1002-context-act.mdc](mdc:1002-context-act.mdc)
```

#### Phase 2: Acting 규칙 적용

**적용 조건**:

```markdown
IF (Planning & Testing 완료 AND 테스트 코드 작성 완료) THEN
AUTO_APPLY [1002-context-act.mdc](mdc:1002-context-act.mdc)
```

**적용 중단 조건**:

```markdown
IF (7단계 TDD 구현 완료 AND TDD Green 단계 달성 AND 사용자 시나리오 테스트 통과 AND 전체 기능 동작 확인 AND 명시적 완료 트리거 발동) THEN
STOP [1002-context-act.mdc](mdc:1002-context-act.mdc)
START [1003-context-reflect.mdc](mdc:1003-context-reflect.mdc)
```

**예외 처리**:

```markdown
IF (테스트 부족 발견) THEN
STOP [1002-context-act.mdc](mdc:1002-context-act.mdc)
RESTART [1004-context-test.mdc](mdc:1004-context-test.mdc)

IF (Context 부족 발견 OR 기술적 의존성 추가 확인 필요) THEN
STOP [1002-context-act.mdc](mdc:1002-context-act.mdc)
RESTART [1001-context-plan.mdc](mdc:1001-context-plan.mdc)
```

#### Phase 3: Reflecting 규칙 적용

**적용 조건**:

```markdown
IF (TDD 구현 완료 AND TDD Green 단계 달성 AND 사용자 시나리오 테스트 통과 AND 명시적 완료 트리거 발동) THEN
APPLY [1003-context-reflect.mdc](mdc:1003-context-reflect.mdc)
```

**적용 중단 조건**:

```markdown
IF (작업 히스토리 정리 완료) THEN
STOP [1003-context-reflect.mdc](mdc:1003-context-reflect.mdc)
END Context-driven development cycle
```

### 🚀 사용 가이드라인

**이 방법론을 사용하는 경우**:

-   신규 기능 개발
-   복잡한 컴포넌트 생성
-   시스템 통합 작업
-   기존 기능 리팩토링

**성공 지표**:

-   구현 전 명확한 Context 매핑
-   단계별 체계적 개발
-   구현 중 Context 갭 최소화
-   기존 시스템과의 성공적 통합

### ⚠️ 프로세스 통제 원칙

**엄격한 단계 진행**:

-   Planning 미완료 시 절대 구현 시작 안 함
-   명시적 트리거 없이 단계 전환 안 함
-   각 단계 완료 기준 충족 후에만 다음 단계 진행

**트리거 시스템**:

-   사용자가 명시적으로 구현 의도를 표현해야 함
-   모호한 표현으로는 단계 전환 불가
-   트리거 발동 시에도 Planning 완료 상태 확인 필수

### 🔗 규칙 참조 가이드

**Planning 단계**: [1001-context-plan.mdc](mdc:1001-context-plan.mdc) 참조
**Testing 단계**: [1004-context-test.mdc](mdc:1004-context-test.mdc) 참조
**Implementation 단계**: [1002-context-act.mdc](mdc:1002-context-act.mdc) 참조  
**Reflection 단계**: [1003-context-reflect.mdc](mdc:1003-context-reflect.mdc) 참조

Context-driven development는 명시적 트리거 시스템을 통해 단계를 통제합니다. Planning 완료 후 명시적 테스트 트리거로 Testing 단계 진입하고, 테스트 코드 작성 완료 시 자동으로 Acting 단계로 전환됩니다. Acting 완료 후에는 명시적 완료 트리거가 있어야 Reflecting 단계로 진입합니다. 이 004번 규칙이 전체 프로세스를 오케스트레이션합니다.