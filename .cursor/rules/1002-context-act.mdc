---
alwaysApply: false
---
# Context Implementation Phase

<version>2.1.0</version>

## Context

Context-driven development의 2단계: 계획된 Context를 바탕으로 단계별 구현

**적용 조건**: 004-project-workflow의 Phase 2 상태일 때 (Planning 완료 + 트리거 발동)

## 핵심 원칙

### 🏗️ 7단계 TDD 구현 프로세스 (Red-Green-Refactor)

> TDD 사이클을 완성하는 구현 단계

**목표**: Red(실패 테스트) → Green(테스트 통과) → Refactor(코드 개선)

0. **TDD Red 확인** → 1. **데이터 타입 정의** → 2. **API Routes 구현** → 3. **상태 관리 구현** → 4. **이벤트 및 동작 구현** → 5. **Component 구현** → 6. **통합 및 Green 달성** → 7. **Refactor (선택적)**

### 📋 단계별 구현 가이드

#### 0단계: TDD Red 단계 확인 (Testing Phase에서 작성된 실패 테스트)
-   [ ] Testing Phase에서 작성된 실패하는 테스트 케이스 확인
-   [ ] 테스트가 Red 상태(실패)인지 검증
-   [ ] 테스트 시나리오가 비즈니스 요구사항을 반영하는지 확인

#### 1단계: 데이터 타입 정의

**목표**: 데이터 구조 명확화

-   [ ] TypeScript Interface/Type 작성 (`domains/[domain]/types/index.ts`)
-   [ ] API Schema 타입 정의
-   [ ] Validation Schema 구현 (Zod)
-   [ ] 표준 타입 존재 여부 확인

#### 2단계: API Routes 구현

**목표**: 백엔드 연결 준비

-   [ ] Next.js API Routes 폴더 구조 생성 (`src/app/api/(domain)/...`)
-   [ ] 백엔드 API 프록시 route.ts 파일 작성
-   [ ] Request/Response 타입 정의 및 검증
-   [ ] Error Handling 및 HTTP Status Code 처리
-   [ ] API 엔드포인트 테스트 및 검증

#### 3단계: 상태 관리 구현

**목표**: 클라이언트 상태 설계

-   [ ] Store 설정 및 Action 정의 (`domains/[domain]/store/`)
-   [ ] Local State 초기값 설정
-   [ ] State Update Logic 구현
-   [ ] Side Effect 처리 (useEffect)
-   [ ] TanStack Query hooks 구현 (`domains/[domain]/hooks/`)

#### 4단계: 이벤트 및 동작 구현

**목표**: 사용자 액션 로직 구현

-   [ ] Event Handler 함수 작성
-   [ ] API 호출 함수 구현
-   [ ] Error Handling 로직 추가
-   [ ] Loading/Success/Error 상태 처리
-   [ ] 이벤트 플로우 테스트

#### 5단계: Component 구현

**목표**: UI 렌더링 완성

-   [ ] UI Component 작성 (`domains/[domain]/components/`)
-   [ ] Props 연결 및 State Binding
-   [ ] 스타일링 적용 ([2006-she-styling-guidelines.mdc](mdc:.cursor/rules/2006-she-styling-guidelines.mdc))
-   [ ] SHE 플랫폼 패턴 적용 ([2000-she-component-structure.mdc](mdc:.cursor/rules/2000-she-component-structure.mdc))

#### 6단계: 통합 및 최종 검증

**목표**: 전체 기능 완성 및 TDD Green 단계 달성

-   [ ] Component 통합
-   [ ] Route 연결
-   [ ] Edge Case 처리
-   [ ] **TDD Green 단계**: 모든 테스트가 통과하는지 확인
-   [ ] **테스트 실행**: `npm test` 또는 `yarn test`로 전체 테스트 실행
-   [ ] **테스트 통과 확인**: Red → Green 전환 완료 검증

#### 7단계: TDD Refactor 단계 (선택적)

**목표**: 코드 품질 개선 (테스트 통과 상태 유지)

-   [ ] 코드 리팩토링 (가독성, 성능, 구조 개선)
-   [ ] 중복 코드 제거
-   [ ] 함수/컴포넌트 분리 및 추상화
-   [ ] **리팩토링 후 테스트 재실행**: 모든 테스트가 여전히 통과하는지 확인
-   [ ] 코드 품질 도구 실행 (ESLint, Prettier 등)

### ✅ 단계별 완료 기준

**각 단계 완료 조건**:

-   해당 단계 체크리스트 100% 완료
-   다음 단계 진행에 필요한 산출물 준비 완료
-   각 단계별 동작 확인 (체크포인트 통과)

**전체 완료 조건**:

-   모든 7단계 완료 (0-6단계 필수, 7단계 선택적)
-   **TDD Green 단계 달성**: 모든 테스트 통과 확인
-   전체 Flow 동작 확인
-   SHE 플랫폼 패턴 준수 확인
-   동작하는 기능 완성
-   **Red-Green-Refactor 사이클 완성**

## 필수 사항

Context Implementation Phase는 TDD Red-Green-Refactor 사이클을 완성하는 단계입니다. Testing Phase에서 작성된 실패하는 테스트(Red)를 통과시키는 최소한의 구현(Green)을 완료하고, 선택적으로 코드 품질을 개선(Refactor)합니다. **모든 테스트가 통과해야만 진정한 구현 완료**로 간주되며, 이후 명시적 완료 트리거가 있어야 Reflecting 단계로 진입할 수 있습니다. 004-project-workflow.mdc가 전체 TDD 프로세스를 오케스트레이션합니다.
